input {
  beats {
    type => "filebeat"
    port => 5044
  }
}
filter {

if [type] == "filebeat" {
  grok {
    match => { "[log][file][path]" => "%{GREEDYDATA}/%{GREEDYDATA:[file][name]}$" }
  }
  grok {
    match => { "[log][file][path]" => "(?<[file][directory]>[^/]+)/[^/]+/[^/]+$" }
  }

  if "gpp_logs" in [fields][kind] {
    grok {
      match => { "[log][file][path]" => "(?<[log][directory]>(.*\/))(?<[log][gpp][server]>(.*))_(?<[log][gpp][type]>([^\.]+))" }
    }

    grok {
      match => { "message"  =>"(?<[log][created]>[0-9]{4}-[0-9]{2}-[0-9]{2}[ ][0-9]{2}\:[0-9]{2}\:[0-9]{2}\.[0-9]{3})(?:\s+)%{LOGLEVEL:[log][level]}(?:\s+)%{DATA:[log][thread][id]}(?:\s+)%{DATA:[log][thread][name]}\:(?:\s+)%{GREEDYDATA:[log][message]}" }
      #add_field => [ "[log][test]", "%{message}" ]
      remove_field => "message"
    }

      grok {
        match => { "[log][message]" => "%{UNIXPATH:[log][paths]}" }
      }
      mutate {
          gsub => [ "[log][paths]","[./]", " " ]
      }

    if "start handling new file" in [log][message] {
      grok {
        match => [ "[log][message]", "%{GREEDYDATA}/(?<[log][proc][dates]>[0-9\_\-\.]+)%{GREEDYDATA:[log][proc][file]}" ]
      }
      if "fcb.na.pes.unp" in [log][proc][file] { 
        mutate {
          add_field => { "[log][proc][type]" => "unp" }
          } 
      }
      else if "FromMQ" in [log][proc][file] { 
        mutate {
          add_field => { "[log][proc][type]" => "mq" }
          } 
      }
      else if "fcb.NA.pes.createtransfertran" in [log][proc][file] { 
        mutate {
          add_field => { "[log][proc][type]" => "ctt" }
          } 
      }
      else if "fcb.NA.pes.achupload" in [log][proc][file] { 
        mutate {
          add_field => { "[log][proc][type]" => "ach" }
          } 
      }
      else if "fcb.NA.AMC" in [log][proc][file] { 
        mutate {
          add_field => { "[log][proc][type]" => "amc" }
          } 
      }
    }


    grok {
      match => [ "[log][thread][name]", "(\[(?:MDP )%{GREEDYDATA:[fields][interface][name]}\])" ]
    }

    date {
      match => [ "[log][created]" , "yyyy-MM-dd HH:mm:ss.SSS" ]
      target => "@timestamp"
    }
  }

if "cache_logs" in [fields][kind] {
    grok {
      match => { "[log][file][path]" => "(?<[log][directory]>(.*\/))(?<[log][gpp][server]>(.*))_(?<[log][gpp][type]>([^\.]+))" }
    }

    grok {
      match => { "message"  =>"(?<[log][created]>[0-9]{4}-[0-9]{2}-[0-9]{2}[ ][0-9]{2}\:[0-9]{2}\:[0-9]{2}\.[0-9]{3})(?:\s+)%{LOGLEVEL:[log][level]}(?:\s+)%{DATA:[log][thread][id]}(?:\s+)%{DATA:[log][thread][name]}\:(?:\s+)%{GREEDYDATA:[log][message]}" }
      #add_field => [ "[log][test]", "%{message}" ]
      remove_field => "message"
    }
    
    grok {
      match => [ "[log][thread][name]", "(\[(?:MDP )%{GREEDYDATA:[fields][interface][name]}\])" ]
    }

    date {
      match => [ "[log][created]" , "yyyy-MM-dd HH:mm:ss.SSS" ]
      target => "@timestamp"
    }
  }

  if "es_logs" in [fields][kind] {
    grok {
      match => { "[log][file][path]" => "(?<[log][directory]>(.*\/))(?<[log][gpp][server]>([a-z]+[1-9]+))/(?<[log][gpp][type]>([A-Za-z0-9_]+))" }
    }

    grok {
      match => { "message"  =>"(^\[)(?<[log][created]>[0-9]{4}-[0-9]{2}-[0-9]{2}\s+[0-9]{2}\:[0-9]{2}\:[0-9]{2}\,[0-9]{3})[ \[\]]+%{LOGLEVEL:[log][level]}[ \[\]]+%{DATA:[log][thread][id]}[ \[\]]+%{DATA:[log][thread][name]}[ \[\]]+%{GREEDYDATA:[log][message]}" }
      remove_field => "message"
    }

    date {
      match => [ "[log][created]" , "yyyy-MM-dd HH:mm:ss,SSS" ]
      target => "@timestamp"
    }
  }

  if "rbdp_logs" in [fields][kind] {
    grok {
      match => { "[log][file][path]" => "(?<[log][directory]>[^/].*)/(?<[log][gpp][type]>[^\.]+)\..*$" }
    }

    grok {
      match => [ "message", "(?<[log][created]>[0-9]{4}-[0-9]{2}-[0-9]{2}\s+[0-9]{2}\:[0-9]{2}\:[0-9]{2}\,[0-9]{3})[ \|]+%{LOGLEVEL:[log][level]}[ \|]+%{DATA:[log][thread][id]}[ \|]+%{DATA:[log][thread][name]}[ \|]+%{GREEDYDATA:[log][message]}" ]
      remove_field => "message"
    }

    grok {
      match => { "[log][file][path]" => "(?<[log][gpp][server]>[^/]+)/[^/]+/[^/]+$" }
    }

    date {
      match => [ "[log][created]" , "yyyy-MM-dd HH:mm:ss,SSS" ]
      target => "@timestamp"
    }
  }

  if "sys_logs" in [fields][kind] {
    grok {
      match => { "[log][file][path]" => "(?<[log][directory]>(.*\/))(?<[log][gpp][server]>([a-z]+[1-9]+))/(?<[log][gpp][type]>([A-Za-z]+))" }
    }

    grok {
      match => [ "message", "(^\[)(?<[log][created]>[0-9]{1,2}/[0-9]{1,2}/[0-9]{1,2}\s[0-9]{1,2}\:[0-9]{1,2}\:[0-9]{1,2}\:[0-9]{3})(?: SAST\] )%{DATA:[log][thread][id]} %{DATA:[log][thread][name]}[ ]+%{WORD:[log][level]}[ ]+%{GREEDYDATA:[log][message]}" ]
      remove_field => "message"
    }

    if [log][level] == "E" {
      mutate {
        replace => { "[log][level]" => "ERROR" }
      }
    }

    if [log][level] == "I" {
      mutate {
        replace => { "[log][level]" => "INFO" }
      }
    }

    if [log][level] == "F" {
      mutate {
        replace => { "[log][level]" => "FATAL" }
      }
    }

    if [log][level] == "W" {
      mutate {
        replace => { "[log][level]" => "WARN" }
      }
    }

    if [log][level] == "O" {
      mutate {
        replace => { "[log][level]" => "APPMSG" }
      }
    }

    if [log][level] == "C" {
      mutate {
        replace => { "[log][level]" => "CONF" }
      }
    }

    if [log][level] == "A" {
      mutate {
        replace => { "[log][level]" => "AUDIT" }
      }
    }

    date {
      match => [ "[log][created]" , "MM/dd/yy HH:mm:ss:SSS", "M/d/yy H:mm:ss:SSS","ISO8601" ]
      target => "@timestamp"
    }
  }

  if "mqfte_logs" in [fields][kind] {
    grok {
      match => { "[log][file][path]" => "(?<[log][directory]>(.*\/))(?<[log][gpp][server]>([a-z]+[1-9]+))/(?<[log][gpp][type]>([A-Za-z]+))" }
    }

    grok {
      match => [ "message", "(^\[)(?<[log][created]>[0-9]{1,2}/[0-9]{1,2}/[0-9]{1,4}\s[0-9]{1,2}\:[0-9]{1,2}\:[0-9]{1,2}\:[0-9]{3})(?: SAST\]) %{DATA:[log][thread][id]} %{DATA:[log][thread][name]}[ ]+%{WORD:[log][level]}[ ]+%{GREEDYDATA:[log][message]}" ]
      remove_field => "message"
    }

    if [log][level] == "E" {
      mutate {
        replace => { "[log][level]" => "ERROR" }
      }
    }

    if [log][level] == "I" {
      mutate {
        replace => { "[log][level]" => "INFO" }
      }
    }

    if [log][level] == "F" {
      mutate {
        replace => { "[log][level]" => "FATAL" }
      }
    }

    if [log][level] == "W" {
      mutate {
        replace => { "[log][level]" => "WARN" }
      }
    }

    if [log][level] == "O" {
      mutate {
        replace => { "[log][level]" => "APPMSG" }
      }
    }

    if [log][level] == "C" {
      mutate {
        replace => { "[log][level]" => "CONF" }
      }
    }

    if [log][level] == "A" {
      mutate {
        replace => { "[log][level]" => "AUDIT" }
      }
    }

    date {
      match => [ "[log][created]" , "dd/MM/yyyy HH:mm:ss:SSS", "d/MM/yy H:mm:ss:SSS","ISO8601" ]
      target => "@timestamp"
    }
  }
}
}

output {
  if [type] == "filebeat" {
  elasticsearch {
      hosts => "https://es-node1:9200"
      manage_template => false
      index => "%{[type]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
      ssl => "true"
      user => "admin"
      password => "admin"
      ssl_certificate_verification => false
      #ilm_enabled => false
    }
  }
}
